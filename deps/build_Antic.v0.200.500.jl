using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libantic"], :libantic),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Antic_jll.jl/releases/download/Antic-v0.200.500+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Antic.v0.200.500.aarch64-linux-gnu.tar.gz", "44bbfabcc2644117e671f1d9c1856c703373c4269e270bf7b238a3c04b172552"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Antic.v0.200.500.aarch64-linux-musl.tar.gz", "5cd621f7461de83cf2e9de3bfe6801449a0996c62e9e206b84dd2ce067ff482f"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Antic.v0.200.500.armv7l-linux-gnueabihf.tar.gz", "e629dd787586a812917dc89d32a2f6a88d01526424212a2c115c7651efc551ea"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Antic.v0.200.500.armv7l-linux-musleabihf.tar.gz", "1c5d009136b644b2f7bf6da323c78056c41aad5fbc27b824904900e624511a77"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Antic.v0.200.500.i686-linux-gnu.tar.gz", "d99373acf9ab386dafddb24aab4c45f77783d7d30146ef1a48941d190d661da3"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Antic.v0.200.500.i686-linux-musl.tar.gz", "70e95c462a4f72a6ad52904ccc909cb6606c676e91ea68a3d356089f03be9f35"),
    Windows(:i686) => ("$bin_prefix/Antic.v0.200.500.i686-w64-mingw32.tar.gz", "551b08010c1185f8c9cf40085e8685febb9c996bfcf8499d432c1d6603556166"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Antic.v0.200.500.powerpc64le-linux-gnu.tar.gz", "0fcdc29ea1b9a6579062e30494d5fd6406df347eb68f2285d0b94d98aba63628"),
    MacOS(:x86_64) => ("$bin_prefix/Antic.v0.200.500.x86_64-apple-darwin.tar.gz", "08145249302cd5aefd31de4281065d363e25e7c24f8fab83e7d32d50220c31f1"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Antic.v0.200.500.x86_64-linux-gnu.tar.gz", "5659239e4aaeb0271874fb78c8d622fad0fc0dbd95e0542890bd50c6c5443ed3"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Antic.v0.200.500.x86_64-linux-musl.tar.gz", "8efed6b4cb4d8791075ca9daf49aba2ea87c999ea6e4e0db8cd32b9c761ec896"),
    FreeBSD(:x86_64) => ("$bin_prefix/Antic.v0.200.500.x86_64-unknown-freebsd.tar.gz", "99e9f7e257c889b4f336c760ef7669c51addaf5673bb7f2b7b870bd66b1aba8d"),
    Windows(:x86_64) => ("$bin_prefix/Antic.v0.200.500.x86_64-w64-mingw32.tar.gz", "525b8a0dfb150ba6d8df47bf43530803c78c55648e0b390542eeeb0b19b6ced1"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
