using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libcalcium"], :libcalcium),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaBinaryWrappers/Calcium_jll.jl/releases/download/Calcium-v0.300.0+0"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, libc=:glibc) => ("$bin_prefix/Calcium.v0.300.0.aarch64-linux-gnu.tar.gz", "1f2a5fa1cc4fd11febfbe27b435d20891993bc048f666ce5fe30253e8f619cdb"),
    Linux(:aarch64, libc=:musl) => ("$bin_prefix/Calcium.v0.300.0.aarch64-linux-musl.tar.gz", "c1dd548ee1955dfbc3ecf1f19e9c10be074a397108fa0b86d1f3d5061648989b"),
    Linux(:armv7l, libc=:glibc, call_abi=:eabihf) => ("$bin_prefix/Calcium.v0.300.0.armv7l-linux-gnueabihf.tar.gz", "7af8b9656794945cbcd329f0ebf937a759337231fb0c833625ea4786f1ffba39"),
    Linux(:armv7l, libc=:musl, call_abi=:eabihf) => ("$bin_prefix/Calcium.v0.300.0.armv7l-linux-musleabihf.tar.gz", "169dad5fe25e46fd2473f076fce7a47a710502946cd71f520c17eb7464caf93b"),
    Linux(:i686, libc=:glibc) => ("$bin_prefix/Calcium.v0.300.0.i686-linux-gnu.tar.gz", "e9392ee5e4362ea7f8240438d448a105e8554be8d5d09fe80ab800df9748aca1"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/Calcium.v0.300.0.i686-linux-musl.tar.gz", "7aa7d7daac688e0f232148da4369a11e5234f293110ea089bd2ab5d0c99ebe10"),
    Windows(:i686) => ("$bin_prefix/Calcium.v0.300.0.i686-w64-mingw32.tar.gz", "6515c81fc52473c8581138bd967dcc9da77a615682f8dd9eec748459f18aa9de"),
    Linux(:powerpc64le, libc=:glibc) => ("$bin_prefix/Calcium.v0.300.0.powerpc64le-linux-gnu.tar.gz", "149bb8ea920d6d22dc70dd9c6623bdf675e99d853e4b668275f927f4ed9af8ab"),
    MacOS(:x86_64) => ("$bin_prefix/Calcium.v0.300.0.x86_64-apple-darwin.tar.gz", "63406828aa81e92656fa1f1bcfa85417b424f2bf49cf672bb89334ea7001110f"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/Calcium.v0.300.0.x86_64-linux-gnu.tar.gz", "baddadb8d1c3af3c5be02d1f801a045ccdca6a41582df18cff2fe732c1217871"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/Calcium.v0.300.0.x86_64-linux-musl.tar.gz", "82ab786588680cef4011350c2ccd0631f11b2608f26a0e993d5d38a691c48e42"),
    FreeBSD(:x86_64) => ("$bin_prefix/Calcium.v0.300.0.x86_64-unknown-freebsd.tar.gz", "82910709bacab9ec8bf40588b38a8b8bdd755cc026c2d856898cf19a81688bf5"),
    Windows(:x86_64) => ("$bin_prefix/Calcium.v0.300.0.x86_64-w64-mingw32.tar.gz", "936c72583a8b8bfb4bf9e8cc72be6443a1b58d759f5fb1a1efc7e09391d6eb39"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
